// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NutritionIASDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import JWTDecode
import Swift
import SwiftUI
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AyunoTimerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) required public init(isSmall: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NutritionSDK {
  public static let sharedInstance: NutritionIASDK.NutritionSDK
  public var showExcludedAliments: Swift.Bool {
    get
    set
  }
  public func start(with user: Swift.String, appID: Swift.String, password: Swift.String)
  public func setURL(url: Swift.String)
  public func updateProfile(sex: NutritionIASDK.NutritionGender?, height: Swift.Int?, weigth: Swift.Int?, birthDate: Foundation.Date?, activityLevel: Swift.Int, operationDate: Foundation.Date? = nil, generateMenu: Swift.Bool = false, needsWaitingScreens: Swift.Bool = true)
  public func updateProfile(sex: NutritionIASDK.NutritionGender?, height: Swift.Int?, weigth: Swift.Int?, birthDate: Foundation.Date?, generateMenu: Swift.Bool = false, needsWaitingScreens: Swift.Bool = true)
  public func getUserYear() -> Swift.Int?
  public func getUserGender() -> NutritionIASDK.NutritionGender?
  public func getUserHeight() -> Swift.Int?
  public func getUserWeight() -> Swift.Int?
  public func isProfileFilled() -> Swift.Bool
  public func setWaitingSecodsForScreen(_ seconds: Swift.Int)
  public func setMemberId(_ memberId: Swift.String)
  public func setIntermittentFastingEnable(_ isEnable: Swift.Bool)
  public func hasIntermittentFasting() -> Swift.Bool
  public func getIntermittentFastingPhase() -> Swift.String
  public func isDoingIntermittentFasting() -> Swift.Bool
  public func setCountry(_ country: NutritionIASDK.NutritionUserCountry)
  public func setShortProfile(_ isShortProfile: Swift.Bool)
  public func setPremiumAlertText(text: Swift.String?, buttonTitle: Swift.String?, action: (() -> Swift.Void)?)
  public func isPremiumUser(_ isPremium: Swift.Bool)
  public func preferLargeTitlte(_ preferLarge: Swift.Bool)
  public func setDietType(diet: NutritionIASDK.DietType)
  public func startSession(appID: Swift.String, password: Swift.String)
  public func logout()
  public func setMainColor(color: Swift.String)
  public func setNavigationBarColor(color: Swift.String)
  public func setNavigationTintColor(color: Swift.String)
  public func showNutritionModule()
  public func showProfile()
  public func getTodayMenu(_ completion: @escaping ((NutritionIASDK.NutritionDay?) -> ()))
  public func getProfile() -> NutritionIASDK.PublicProfile?
  public func getAyunoController(_ completion: @escaping ((UIKit.UIViewController?) -> ()))
  public func getAyunoPhaseInfo(_ completion: @escaping ((UIKit.UIViewController?) -> ()))
  public func setNavigationTitle(title: Swift.String)
  public func getTodayMenu() -> NutritionIASDK.NutritionDay?
  public func showTodayIntake(_ intakeNumber: Swift.Int)
  public func getNutritionModule(_ completion: @escaping ((UIKit.UIViewController?) -> ()))
  public func getWeekMenu(_ completion: @escaping ((UIKit.UIViewController?) -> ()))
  public func getNutritionProfile(_ completion: @escaping ((UIKit.UIViewController?) -> ()))
  public func getNumberOfIntakes(_ completion: @escaping ((Swift.Int) -> ()))
  public func setLanguage(_ language: NutritionIASDK.NutritionLanguage)
  @objc deinit
}
public struct PublicProfile : Swift.Codable {
  public var name: Swift.String?
  public var lastName: Swift.String?
  public var height: Swift.Int?
  public var weight: Swift.Int?
  public var gender: NutritionIASDK.NutritionGender?
  public var birthDate: Foundation.Date?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NutritionGender : Swift.String, Swift.Codable {
  case male, female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NutritionLanguage : Swift.String, Swift.Codable, Swift.CaseIterable {
  case es
  case en
  case pt
  case de
  case ca
  case it
  case eu
  case enUS
  case fr
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NutritionIASDK.NutritionLanguage]
  public typealias RawValue = Swift.String
  public static var allCases: [NutritionIASDK.NutritionLanguage] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum DietType : Swift.Int {
  case standard
  case diabetes
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NutritionUserCountry : Swift.Int, Swift.Codable {
  case spain, portugal, colombia, uk, usa, germany, italy, cataluna, spainEUS, usa2, france
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct NutritionDay : Swift.Codable {
  public var day: Swift.Int?
  public var intakes: [NutritionIASDK.NutritionIntake]?
  public var kcalDay: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NutritionIntake : Swift.Codable {
  public var intakeId: Swift.Int?
  public var name: Swift.String?
  public var day: Swift.Int?
  public var dishes: [NutritionIASDK.NutritionDish]?
  public func getTotalKcal() -> Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NutritionDish : Swift.Codable {
  public var dishID: Swift.Int?
  public var name: Swift.String?
  public var dishOrderID: Swift.Int?
  public var typeName: Swift.String?
  public var carbs: Swift.Int?, proteins: Swift.Int?, fats: Swift.Int?, kcal: Swift.Int?
  public var preferences: [Swift.Int]?
  public var difficulty: Swift.Int?
  public var ingredients: Swift.String?, recipe: Swift.String?
  public var binaryUrls: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class VitaleViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NutritionIASDK.NutritionGender : Swift.Equatable {}
extension NutritionIASDK.NutritionGender : Swift.Hashable {}
extension NutritionIASDK.NutritionGender : Swift.RawRepresentable {}
extension NutritionIASDK.NutritionLanguage : Swift.Equatable {}
extension NutritionIASDK.NutritionLanguage : Swift.Hashable {}
extension NutritionIASDK.NutritionLanguage : Swift.RawRepresentable {}
extension NutritionIASDK.DietType : Swift.Equatable {}
extension NutritionIASDK.DietType : Swift.Hashable {}
extension NutritionIASDK.DietType : Swift.RawRepresentable {}
extension NutritionIASDK.NutritionUserCountry : Swift.Equatable {}
extension NutritionIASDK.NutritionUserCountry : Swift.Hashable {}
extension NutritionIASDK.NutritionUserCountry : Swift.RawRepresentable {}
